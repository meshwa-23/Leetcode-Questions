class Solution {
    public List<List<Integer>> subsets(int[] nums) {
        List<List<Integer>> result = new ArrayList<>();
        List<Integer> currentSubset = new ArrayList<>();
        backtrack(nums, 0, currentSubset, result);
        return result;
    }

    private void backtrack(int[] nums, int start, List<Integer> currentSubset, List<List<Integer>> result) {
        // Add a copy of the current subset to the result list.
        // This is a base case for each recursive call.
        result.add(new ArrayList<>(currentSubset));

        // Iterate through the remaining elements.
        for (int i = start; i < nums.length; i++) {
            // Include the current element.
            currentSubset.add(nums[i]);

            // Recurse with the next element.
            backtrack(nums, i + 1, currentSubset, result);

            // Backtrack by removing the last element.
            // This allows us to explore other branches (subsets without the current element).
            currentSubset.remove(currentSubset.size() - 1);
        }
    }
}
