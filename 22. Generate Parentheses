class Solution {
    public List<String> generateParenthesis(int n) {
        List<String> result = new ArrayList<>();
        backtrack(result, "", 0, 0, n);
        return result;
    }

    private void backtrack(List<String> result, String currentString, int openCount, int closeCount, int n) {
        
        if (currentString.length() == 2 * n) {
            result.add(currentString);
            return;
        }

        // Recursive call to add an open parenthesis
        // We can add an open parenthesis as long as we haven't used all n of them.
        if (openCount < n) {
            backtrack(result, currentString + "(", openCount + 1, closeCount, n);
        }

        // Recursive call to add a close parenthesis
        // We can add a close parenthesis only if the number of open parentheses
        // is greater than the number of close parentheses. This ensures validity.
        if (closeCount < openCount) {
            backtrack(result, currentString + ")", openCount, closeCount + 1, n);
        }
    }
}
